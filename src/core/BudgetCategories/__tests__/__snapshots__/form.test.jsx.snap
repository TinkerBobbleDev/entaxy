// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CategoryForm matches snapshot for existing category 1`] = `
"<Provider store={{...}}>
  <Connect(WithStyles(WithFormik(CategoryFormComponent))) category={{...}} group={{...}} handleCancel={[Function: mockConstructor]}>
    <WithStyles(WithFormik(CategoryFormComponent)) category={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]}>
      <WithFormik(CategoryFormComponent) classes={{...}} category={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]}>
        <Formik classes={{...}} category={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]} enableReinitialize={true} validationSchema={[Function]} handleSubmit={[Function: handleSubmit]} validate={[undefined]} initialValues={{...}} initialStatus={[undefined]} onSubmit={[Function]} render={[Function]} validateOnChange={true} validateOnBlur={true} isInitialValid={false}>
          <CategoryFormComponent classes={{...}} category={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]} values={{...}} errors={{...}} touched={{...}} isSubmitting={false} isValidating={false} submitCount={0} status={[undefined]} resetForm={[Function]} submitForm={[Function]} validateForm={[Function]} validateField={[Function]} setError={[Function]} setErrors={[Function]} setFieldError={[Function]} setFieldTouched={[Function]} setFieldValue={[Function]} setStatus={[Function]} setSubmitting={[Function]} setTouched={[Function]} setValues={[Function]} setFormikState={[Function]} dirty={false} isValid={false} initialValues={{...}} registerField={[Function]} unregisterField={[Function]} handleBlur={[Function]} handleChange={[Function]} handleReset={[Function]} handleSubmit={[Function]} validateOnChange={true} validateOnBlur={true}>
            <form onSubmit={[Function]} className=\\"WithFormik(CategoryFormComponent)-form-1\\">
              <WithStyles(ForwardRef(TextField)) className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Category name\\" inputProps={{...}} value=\\"Home Phone\\" name=\\"name\\" onChange={[Function]} error={[undefined]} helperText={[undefined]} autoFocus={true}>
                <ForwardRef(TextField) classes={{...}} className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Category name\\" inputProps={{...}} value=\\"Home Phone\\" name=\\"name\\" onChange={[Function]} error={[undefined]} helperText={[undefined]} autoFocus={true}>
                  <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                    <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                      <div className=\\"MuiFormControl-root MuiTextField-root WithFormik(CategoryFormComponent)-input-2 MuiFormControl-marginDense\\">
                        <WithStyles(ForwardRef(InputLabel)) htmlFor={[undefined]}>
                          <ForwardRef(InputLabel) classes={{...}} htmlFor={[undefined]}>
                            <WithStyles(ForwardRef(FormLabel)) data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense\\" classes={{...}} htmlFor={[undefined]}>
                              <ForwardRef(FormLabel) classes={{...}} data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense\\" htmlFor={[undefined]}>
                                <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiFormLabel-filled\\" data-shrink={true} htmlFor={[undefined]}>
                                  Category name
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Input)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value=\\"Home Phone\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                          <ForwardRef(Input) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value=\\"Home Phone\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                            <WithStyles(ForwardRef(InputBase)) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} value=\\"Home Phone\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                              <ForwardRef(InputBase) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} value=\\"Home Phone\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                                <div className=\\"MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense\\" onClick={[Function: handleClick]}>
                                  <input aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} className=\\"MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense\\" defaultValue={[undefined]} disabled={false} id={[undefined]} name=\\"name\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]} onKeyDown={[undefined]} onKeyUp={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value=\\"Home Phone\\" type=\\"text\\" aria-label=\\"Category name\\" maxLength={100} />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <WithStyles(ForwardRef(TextField)) className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Budget limit\\" inputProps={{...}} value={[undefined]} name=\\"budgetLimit\\" onChange={[Function]} error={[undefined]} helperText={[undefined]}>
                <ForwardRef(TextField) classes={{...}} className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Budget limit\\" inputProps={{...}} value={[undefined]} name=\\"budgetLimit\\" onChange={[Function]} error={[undefined]} helperText={[undefined]}>
                  <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                    <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                      <div className=\\"MuiFormControl-root MuiTextField-root WithFormik(CategoryFormComponent)-input-2 MuiFormControl-marginDense\\">
                        <WithStyles(ForwardRef(InputLabel)) htmlFor={[undefined]}>
                          <ForwardRef(InputLabel) classes={{...}} htmlFor={[undefined]}>
                            <WithStyles(ForwardRef(FormLabel)) data-shrink={false} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" classes={{...}} htmlFor={[undefined]}>
                              <ForwardRef(FormLabel) classes={{...}} data-shrink={false} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" htmlFor={[undefined]}>
                                <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" data-shrink={false} htmlFor={[undefined]}>
                                  Budget limit
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Input)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value={[undefined]} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                          <ForwardRef(Input) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value={[undefined]} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                            <WithStyles(ForwardRef(InputBase)) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} value={[undefined]} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                              <ForwardRef(InputBase) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} value={[undefined]} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                                <div className=\\"MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense\\" onClick={[Function: handleClick]}>
                                  <input aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} className=\\"MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense\\" defaultValue={[undefined]} disabled={false} id={[undefined]} name=\\"budgetLimit\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]} onKeyDown={[undefined]} onKeyUp={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value={[undefined]} type=\\"text\\" aria-label=\\"Budget limit\\" maxLength={100} />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <div className=\\"WithFormik(CategoryFormComponent)-formActions-3\\">
                <WithStyles(SubmitButtonWithProgress) label=\\"Save\\" isSubmitting={false}>
                  <SubmitButtonWithProgress classes={{...}} label=\\"Save\\" isSubmitting={false}>
                    <div className=\\"SubmitButtonWithProgress-wrapper-59\\">
                      <WithStyles(ForwardRef(Button)) type=\\"submit\\" color=\\"secondary\\" disabled={false}>
                        <ForwardRef(Button) classes={{...}} type=\\"submit\\" color=\\"secondary\\" disabled={false}>
                          <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"submit\\">
                            <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"submit\\">
                              <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary\\" onBlur={[Function]} onClick={[undefined]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onDragLeave={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex={0} type=\\"submit\\" disabled={false}>
                                <span className=\\"MuiButton-label\\">
                                  Save
                                </span>
                                <NoSsr>
                                  <WithStyles(undefined) center={false}>
                                    <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                      <span className=\\"MuiTouchRipple-root\\">
                                        <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                      </span>
                                    </ForwardRef(TouchRipple)>
                                  </WithStyles(undefined)>
                                </NoSsr>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                    </div>
                  </SubmitButtonWithProgress>
                </WithStyles(SubmitButtonWithProgress)>
                <div className=\\"WithFormik(CategoryFormComponent)-buttonWrapper-4\\">
                  <WithStyles(ForwardRef(Button)) color=\\"secondary\\" onClick={[Function: mockConstructor]}>
                    <ForwardRef(Button) classes={{...}} color=\\"secondary\\" onClick={[Function: mockConstructor]}>
                      <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: mockConstructor]}>
                        <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: mockConstructor]}>
                          <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary\\" onBlur={[Function]} onClick={[Function: mockConstructor]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onDragLeave={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex={0} type=\\"button\\" disabled={false}>
                            <span className=\\"MuiButton-label\\">
                              Cancel
                            </span>
                            <NoSsr>
                              <WithStyles(undefined) center={false}>
                                <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                  <span className=\\"MuiTouchRipple-root\\">
                                    <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(undefined)>
                            </NoSsr>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </div>
              </div>
            </form>
          </CategoryFormComponent>
        </Formik>
      </WithFormik(CategoryFormComponent)>
    </WithStyles(WithFormik(CategoryFormComponent))>
  </Connect(WithStyles(WithFormik(CategoryFormComponent)))>
</Provider>"
`;

exports[`CategoryForm matches snapshot for new category 1`] = `
"<Provider store={{...}}>
  <Connect(WithStyles(WithFormik(CategoryFormComponent))) group={{...}} handleCancel={[Function: mockConstructor]}>
    <WithStyles(WithFormik(CategoryFormComponent)) group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]}>
      <WithFormik(CategoryFormComponent) classes={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]}>
        <Formik classes={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]} enableReinitialize={true} validationSchema={[Function]} handleSubmit={[Function: handleSubmit]} validate={[undefined]} initialValues={{...}} initialStatus={[undefined]} onSubmit={[Function]} render={[Function]} validateOnChange={true} validateOnBlur={true} isInitialValid={false}>
          <CategoryFormComponent classes={{...}} group={{...}} handleCancel={[Function: mockConstructor]} budget={{...}} handleCreate={[Function]} handleUpdate={[Function]} values={{...}} errors={{...}} touched={{...}} isSubmitting={false} isValidating={false} submitCount={0} status={[undefined]} resetForm={[Function]} submitForm={[Function]} validateForm={[Function]} validateField={[Function]} setError={[Function]} setErrors={[Function]} setFieldError={[Function]} setFieldTouched={[Function]} setFieldValue={[Function]} setStatus={[Function]} setSubmitting={[Function]} setTouched={[Function]} setValues={[Function]} setFormikState={[Function]} dirty={false} isValid={false} initialValues={{...}} registerField={[Function]} unregisterField={[Function]} handleBlur={[Function]} handleChange={[Function]} handleReset={[Function]} handleSubmit={[Function]} validateOnChange={true} validateOnBlur={true}>
            <form onSubmit={[Function]} className=\\"WithFormik(CategoryFormComponent)-form-1\\">
              <WithStyles(ForwardRef(TextField)) className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Category name\\" inputProps={{...}} value=\\"\\" name=\\"name\\" onChange={[Function]} error={[undefined]} helperText={[undefined]} autoFocus={true}>
                <ForwardRef(TextField) classes={{...}} className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Category name\\" inputProps={{...}} value=\\"\\" name=\\"name\\" onChange={[Function]} error={[undefined]} helperText={[undefined]} autoFocus={true}>
                  <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                    <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                      <div className=\\"MuiFormControl-root MuiTextField-root WithFormik(CategoryFormComponent)-input-2 MuiFormControl-marginDense\\">
                        <WithStyles(ForwardRef(InputLabel)) htmlFor={[undefined]}>
                          <ForwardRef(InputLabel) classes={{...}} htmlFor={[undefined]}>
                            <WithStyles(ForwardRef(FormLabel)) data-shrink={false} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" classes={{...}} htmlFor={[undefined]}>
                              <ForwardRef(FormLabel) classes={{...}} data-shrink={false} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" htmlFor={[undefined]}>
                                <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense\\" data-shrink={false} htmlFor={[undefined]}>
                                  Category name
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Input)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value=\\"\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                          <ForwardRef(Input) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value=\\"\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                            <WithStyles(ForwardRef(InputBase)) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} value=\\"\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                              <ForwardRef(InputBase) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} defaultValue={[undefined]} name=\\"name\\" rows={[undefined]} rowsMax={[undefined]} value=\\"\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                                <div className=\\"MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense\\" onClick={[Function: handleClick]}>
                                  <input aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={true} className=\\"MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense\\" defaultValue={[undefined]} disabled={false} id={[undefined]} name=\\"name\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]} onKeyDown={[undefined]} onKeyUp={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value=\\"\\" type=\\"text\\" aria-label=\\"Category name\\" maxLength={100} />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <WithStyles(ForwardRef(TextField)) className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Budget limit\\" inputProps={{...}} value={0} name=\\"budgetLimit\\" onChange={[Function]} error={[undefined]} helperText={[undefined]}>
                <ForwardRef(TextField) classes={{...}} className=\\"WithFormik(CategoryFormComponent)-input-2\\" margin=\\"dense\\" label=\\"Budget limit\\" inputProps={{...}} value={0} name=\\"budgetLimit\\" onChange={[Function]} error={[undefined]} helperText={[undefined]}>
                  <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                    <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root WithFormik(CategoryFormComponent)-input-2\\" error={[undefined]} fullWidth={[undefined]} hiddenLabel={[undefined]} required={false} variant=\\"standard\\" margin=\\"dense\\">
                      <div className=\\"MuiFormControl-root MuiTextField-root WithFormik(CategoryFormComponent)-input-2 MuiFormControl-marginDense\\">
                        <WithStyles(ForwardRef(InputLabel)) htmlFor={[undefined]}>
                          <ForwardRef(InputLabel) classes={{...}} htmlFor={[undefined]}>
                            <WithStyles(ForwardRef(FormLabel)) data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense\\" classes={{...}} htmlFor={[undefined]}>
                              <ForwardRef(FormLabel) classes={{...}} data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense\\" htmlFor={[undefined]}>
                                <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiFormLabel-filled\\" data-shrink={true} htmlFor={[undefined]}>
                                  Budget limit
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(Input)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value={0} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                          <ForwardRef(Input) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} fullWidth={[undefined]} multiline={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} type={[undefined]} value={0} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                            <WithStyles(ForwardRef(InputBase)) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} value={0} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                              <ForwardRef(InputBase) classes={{...}} fullWidth={false} inputComponent=\\"input\\" multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} defaultValue={[undefined]} name=\\"budgetLimit\\" rows={[undefined]} rowsMax={[undefined]} value={0} id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[Function]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}}>
                                <div className=\\"MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense\\" onClick={[Function: handleClick]}>
                                  <input aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={[undefined]} className=\\"MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense\\" defaultValue={[undefined]} disabled={false} id={[undefined]} name=\\"budgetLimit\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]} onKeyDown={[undefined]} onKeyUp={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value={0} type=\\"text\\" aria-label=\\"Budget limit\\" maxLength={100} />
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <div className=\\"WithFormik(CategoryFormComponent)-formActions-3\\">
                <WithStyles(SubmitButtonWithProgress) label=\\"Save\\" isSubmitting={false}>
                  <SubmitButtonWithProgress classes={{...}} label=\\"Save\\" isSubmitting={false}>
                    <div className=\\"SubmitButtonWithProgress-wrapper-59\\">
                      <WithStyles(ForwardRef(Button)) type=\\"submit\\" color=\\"secondary\\" disabled={false}>
                        <ForwardRef(Button) classes={{...}} type=\\"submit\\" color=\\"secondary\\" disabled={false}>
                          <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"submit\\">
                            <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"submit\\">
                              <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary\\" onBlur={[Function]} onClick={[undefined]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onDragLeave={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex={0} type=\\"submit\\" disabled={false}>
                                <span className=\\"MuiButton-label\\">
                                  Save
                                </span>
                                <NoSsr>
                                  <WithStyles(undefined) center={false}>
                                    <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                      <span className=\\"MuiTouchRipple-root\\">
                                        <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                      </span>
                                    </ForwardRef(TouchRipple)>
                                  </WithStyles(undefined)>
                                </NoSsr>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                    </div>
                  </SubmitButtonWithProgress>
                </WithStyles(SubmitButtonWithProgress)>
                <div className=\\"WithFormik(CategoryFormComponent)-buttonWrapper-4\\">
                  <WithStyles(ForwardRef(Button)) color=\\"secondary\\" onClick={[Function: mockConstructor]}>
                    <ForwardRef(Button) classes={{...}} color=\\"secondary\\" onClick={[Function: mockConstructor]}>
                      <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: mockConstructor]}>
                        <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textSecondary\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: mockConstructor]}>
                          <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary\\" onBlur={[Function]} onClick={[Function: mockConstructor]} onFocus={[Function]} onKeyDown={[Function]} onKeyUp={[Function]} onMouseDown={[Function]} onMouseLeave={[Function]} onMouseUp={[Function]} onDragLeave={[Function]} onTouchEnd={[Function]} onTouchMove={[Function]} onTouchStart={[Function]} tabIndex={0} type=\\"button\\" disabled={false}>
                            <span className=\\"MuiButton-label\\">
                              Cancel
                            </span>
                            <NoSsr>
                              <WithStyles(undefined) center={false}>
                                <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                  <span className=\\"MuiTouchRipple-root\\">
                                    <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                  </span>
                                </ForwardRef(TouchRipple)>
                              </WithStyles(undefined)>
                            </NoSsr>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </div>
              </div>
            </form>
          </CategoryFormComponent>
        </Formik>
      </WithFormik(CategoryFormComponent)>
    </WithStyles(WithFormik(CategoryFormComponent))>
  </Connect(WithStyles(WithFormik(CategoryFormComponent)))>
</Provider>"
`;
